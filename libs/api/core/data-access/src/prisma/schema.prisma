generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model App {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  envs      AppEnv[]
  index     Int       @unique
  logoUrl   String?
  maxEnvs   Int       @default(5)
  name      String
  users     AppUser[]
}

model AppEnv {
  id                             String          @id @default(cuid())
  createdAt                      DateTime        @default(now())
  updatedAt                      DateTime        @updatedAt
  name                           String
  ipsAllowed                     String[]
  ipsBlocked                     String[]
  mints                          AppMint[]
  solanaTransactionMaxRetries    Int             @default(5)
  solanaTransactionSkipPreflight Boolean         @default(false)
  transaction                    Transaction[]
  uasAllowed                     String[]
  uasBlocked                     String[]
  webhookBalanceEnabled          Boolean         @default(false)
  webhookBalanceUrl              String?
  webhookBalanceThreshold        String?
  webhookDebugging               Boolean         @default(false)
  webhookEventEnabled            Boolean         @default(false)
  webhookEventUrl                String?
  webhookSecret                  String?
  webhookVerifyEnabled           Boolean         @default(false)
  webhookVerifyUrl               String?
  webhooks                       Webhook[]
  app                            App             @relation(fields: [appId], references: [id])
  appId                          String
  cluster                        Cluster         @relation(fields: [clusterId], references: [id])
  clusterId                      String
  walletBalances                 WalletBalance[]
  wallets                        Wallet[]

  @@unique([appId, name])
}

model AppMint {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)
  appEnv    AppEnv?  @relation(fields: [appEnvId], references: [id])
  appEnvId  String?
  addMemo   Boolean? @default(false)
  mint      Mint?    @relation(fields: [mintId], references: [id])
  mintId    String?
  wallet    Wallet?  @relation(fields: [walletId], references: [id])
  walletId  String?

  @@unique([order, appEnvId])
}

model AppUser {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  role      AppUserRole
  app       App         @relation(fields: [appId], references: [id])
  appId     String
  user      User        @relation(fields: [userId], references: [id])
  userId    String

  @@unique([appId, userId])
}

enum AppUserRole {
  Member
  Owner
}

model Cluster {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  endpointPrivate String
  endpointPublic  String
  explorer        String
  envs            AppEnv[]
  mints           Mint[]
  name            String
  status          ClusterStatus @default(Active)
  type            ClusterType
}

enum ClusterStatus {
  Active
  Inactive
}

enum ClusterType {
  Custom
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

model Mint {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt
  addMemo          Boolean?  @default(false)
  address          String
  airdropAmount    Int?
  airdropMax       Int?
  airdropSecretKey String?
  appMints         AppMint[]
  coinGeckoId      String?
  decimals         Int
  default          Boolean   @default(false)
  enabled          Boolean   @default(true)
  logoUrl          String?
  name             String
  order            Int       @default(0)
  symbol           String
  type             MintType
  cluster          Cluster   @relation(fields: [clusterId], references: [id])
  clusterId        String

  @@unique([address, clusterId])
  @@unique([address, clusterId, symbol])
  @@unique([order, clusterId])
}

enum MintType {
  SplToken
}

model Transaction {
  id                      String                 @id @default(cuid())
  createdAt               DateTime               @default(now())
  updatedAt               DateTime               @updatedAt
  amount                  String?
  commitment              TransactionCommitment?
  decimals                Int?
  destination             String?
  errors                  TransactionError[]
  feePayer                String?
  ip                      String?
  mint                    String?
  processingDuration      Int?
  referenceId             String?
  referenceType           String?
  signature               String?
  solanaCommitted         DateTime?
  solanaCommittedDuration Int?
  solanaConfirmed         DateTime?
  solanaFinalized         DateTime?
  solanaFinalizedDuration Int?
  solanaStart             DateTime?
  solanaTransaction       Json?
  source                  String?
  status                  TransactionStatus      @default(Processing)
  totalDuration           Int?
  tx                      String?
  ua                      String?
  webhooks                Webhook[]
  webhookEventStart       DateTime?
  webhookEventEnd         DateTime?
  webhookEventDuration    Int?
  webhookVerifyStart      DateTime?
  webhookVerifyEnd        DateTime?
  webhookVerifyDuration   Int?
  appEnv                  AppEnv?                @relation(fields: [appEnvId], references: [id])
  appEnvId                String?
}

enum TransactionCommitment {
  Confirmed
  Finalized
  Processed
}

enum TransactionStatus {
  Committed
  Confirmed
  Failed
  Finalized
  Processing
}

enum TransactionErrorType {
  BadNonce
  InvalidAccount
  SomeError
  Timeout
  Unknown
  WebhookFailed
}

model TransactionError {
  id            String               @id @default(cuid())
  logs          String[]
  message       String
  type          TransactionErrorType @default(Unknown)
  instruction   Int?
  transaction   Transaction          @relation(fields: [transactionId], references: [id])
  transactionId String
}

model User {
  id         String         @id @default(cuid())
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @default(now()) @updatedAt
  avatarUrl  String?
  name       String?
  password   String?
  role       UserRole
  username   String         @unique
  apps       AppUser[]      @relation()
  emails     UserEmail[]    @relation()
  identities UserIdentity[]
  wallets    Wallet[]
}

model UserEmail {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  email     String   @unique
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
}

model UserIdentity {
  id         String           @id @default(cuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @default(now()) @updatedAt
  type       UserIdentityType
  externalId String
  profile    Json?
  owner      User             @relation(fields: [ownerId], references: [id])
  ownerId    String
}

enum UserIdentityType {
  Discord
  GitHub
  Google
}

enum UserRole {
  Admin
  User
}

model Wallet {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  type      WalletType
  publicKey String
  secretKey String
  appMints  AppMint[]
  appEnvs   AppEnv[]        @relation()
  owner     User?           @relation(fields: [ownerId], references: [id])
  ownerId   String?
  balances  WalletBalance[]
}

enum WalletType {
  Generated
  Imported
  Provisioned
}

model WalletBalance {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  balance   BigInt
  change    BigInt
  appEnv    AppEnv?  @relation(fields: [appEnvId], references: [id])
  appEnvId  String?
  wallet    Wallet?  @relation(fields: [walletId], references: [id])
  walletId  String?
}

model Webhook {
  id              String           @id @default(cuid())
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  direction       WebhookDirection
  headers         Json?
  payload         Json?
  referenceId     String?
  referenceType   String?
  responsePayload Json?
  responseError   String?
  responseStatus  Int?
  type            WebhookType
  appEnv          AppEnv?          @relation(fields: [appEnvId], references: [id])
  appEnvId        String?
  transaction     Transaction?     @relation(fields: [transactionId], references: [id])
  transactionId   String?
}

enum WebhookDirection {
  Incoming
  Outgoing
}

enum WebhookType {
  Balance
  Event
  Verify
}
