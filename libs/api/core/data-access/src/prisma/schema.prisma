generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Airdrop {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  amount           Int
  date             String
  fromOwner        String
  fromPreSol       String
  fromPreToken     String
  fromPostSol      String
  fromPostToken    String
  fromTokenAccount String
  mintId           String
  signature        String
  toOwner          String
  toPreSol         String
  toPreToken       String
  toPostSol        String
  toPostToken      String
  toTokenAccount   String
}

model App {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  envs      AppEnv[]
  index     Int       @unique
  name      String
  users     AppUser[]
}

model AppEnv {
  id                    String           @id @default(cuid())
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  name                  String
  ipsAllowed            String[]
  ipsBlocked            String[]
  mints                 AppMint[]
  transaction           AppTransaction[]
  webhookAcceptIncoming Boolean          @default(false)
  webhookEventEnabled   Boolean          @default(false)
  webhookEventUrl       String?
  webhookSecret         String?
  webhookVerifyEnabled  Boolean          @default(false)
  webhookVerifyUrl      String?
  webhooks              AppWebhook[]
  app                   App              @relation(fields: [appId], references: [id])
  appId                 String
  cluster               Cluster          @relation(fields: [clusterId], references: [id])
  clusterId             String
  walletBalances        WalletBalance[]
  wallets               Wallet[]

  @@unique([appId, clusterId])
  @@unique([appId, name])
}

model AppMint {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Int      @default(0)
  appEnv    AppEnv?  @relation(fields: [appEnvId], references: [id])
  appEnvId  String?
  addMemo   Boolean? @default(false)
  mint      Mint?    @relation(fields: [mintId], references: [id])
  mintId    String?
  wallet    Wallet?  @relation(fields: [walletId], references: [id])
  walletId  String?

  @@unique([order, appEnvId])
}

model AppTransaction {
  id                      String                    @id @default(cuid())
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  amount                  String?
  commitment              AppTransactionCommitment?
  destination             String?
  errors                  AppTransactionError[]
  feePayer                String?
  ip                      String?
  mint                    String?
  processingDuration      Int?
  referenceId             String?
  referenceType           String?
  signature               String?
  solanaCommitted         DateTime?
  solanaCommittedDuration Int?
  solanaConfirmed         DateTime?
  solanaFinalized         DateTime?
  solanaFinalizedDuration Int?
  solanaStart             DateTime?
  solanaTransaction       Json?
  source                  String?
  status                  AppTransactionStatus      @default(Processing)
  totalDuration           Int?
  webhooks                AppWebhook[]
  webhookEventStart       DateTime?
  webhookEventEnd         DateTime?
  webhookEventDuration    Int?
  webhookVerifyStart      DateTime?
  webhookVerifyEnd        DateTime?
  webhookVerifyDuration   Int?
  appEnv                  AppEnv?                   @relation(fields: [appEnvId], references: [id])
  appEnvId                String?
}

enum AppTransactionCommitment {
  Confirmed
  Finalized
  Processed
}

enum AppTransactionStatus {
  Committed
  Confirmed
  Failed
  Finalized
  Processing
}

enum AppTransactionErrorType {
  BadNonce
  InvalidAccount
  SomeError
  Timeout
  Unknown
  WebhookFailed
}

model AppTransactionError {
  id               String                  @id @default(cuid())
  logs             String[]
  message          String
  type             AppTransactionErrorType @default(Unknown)
  instruction      Int?
  appTransaction   AppTransaction          @relation(fields: [appTransactionId], references: [id])
  appTransactionId String
}

model AppWebhook {
  id               String              @id @default(cuid())
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt
  direction        AppWebhookDirection
  headers          Json?
  payload          Json?
  referenceId      String?
  referenceType    String?
  responsePayload  Json?
  responseError    String?
  responseStatus   Int?
  type             AppWebhookType
  appEnv           AppEnv?             @relation(fields: [appEnvId], references: [id])
  appEnvId         String?
  appTransaction   AppTransaction      @relation(fields: [appTransactionId], references: [id])
  appTransactionId String
}

enum AppWebhookDirection {
  Incoming
  Outgoing
}

enum AppWebhookType {
  Event
  Verify
}

model AppUser {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  role      AppUserRole
  app       App         @relation(fields: [appId], references: [id])
  appId     String
  user      User        @relation(fields: [userId], references: [id])
  userId    String

  @@unique([appId, userId])
}

enum AppUserRole {
  Member
  Owner
}

model Cluster {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  enableStats     Boolean       @default(false)
  endpointPrivate String
  endpointPublic  String
  explorer        String
  envs            AppEnv[]
  mints           Mint[]
  name            String
  status          ClusterStatus @default(Active)
  type            ClusterType
  stats           ClusterStat[]
}

model ClusterStat {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  numSlots         Int
  numTransactions  Int
  samplePeriodSecs Int
  slot             Int
  cluster          Cluster  @relation(fields: [clusterId], references: [id])
  clusterId        String
}

enum ClusterStatus {
  Active
  Inactive
}

enum ClusterType {
  Custom
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

model Mint {
  id               String    @id @default(cuid())
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @default(now()) @updatedAt
  addMemo          Boolean?  @default(false)
  address          String
  airdropAmount    Int?
  airdropMax       Int?
  airdropSecretKey String?
  appMints         AppMint[]
  coinGeckoId      String?
  decimals         Int
  default          Boolean   @default(false)
  enabled          Boolean   @default(true)
  logoUrl          String?
  name             String
  order            Int       @default(0)
  symbol           String
  type             MintType
  cluster          Cluster   @relation(fields: [clusterId], references: [id])
  clusterId        String

  @@unique([address, clusterId])
  @@unique([address, clusterId, symbol])
  @@unique([order, clusterId])
}

enum MintType {
  SplToken
}

model User {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  avatarUrl String?
  name      String?
  password  String?
  role      UserRole
  username  String      @unique
  apps      AppUser[]   @relation()
  emails    UserEmail[] @relation()
  Wallet    Wallet[]
}

model UserEmail {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  email     String   @unique
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
}

enum UserRole {
  Admin
  User
}

model Wallet {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  type      WalletType
  publicKey String
  secretKey String
  appMints  AppMint[]
  appEnvs   AppEnv[]        @relation()
  owner     User?           @relation(fields: [ownerId], references: [id])
  ownerId   String?
  balances  WalletBalance[]
}

enum WalletType {
  Generated
  Imported
  Provisioned
}

model WalletBalance {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  balance   BigInt
  change    BigInt
  appEnv    AppEnv?  @relation(fields: [appEnvId], references: [id])
  appEnvId  String?
  wallet    Wallet?  @relation(fields: [walletId], references: [id])
  walletId  String?
}
