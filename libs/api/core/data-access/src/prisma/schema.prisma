generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../prisma/prisma-structure.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Airdrop {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  amount           Int
  date             String
  fromOwner        String
  fromPreSol       String
  fromPreToken     String
  fromPostSol      String
  fromPostToken    String
  fromTokenAccount String
  mintId           String
  signature        String
  toOwner          String
  toPreSol         String
  toPreToken       String
  toPostSol        String
  toPostToken      String
  toTokenAccount   String
}

model App {
  id                    String           @id @default(cuid())
  createdAt             DateTime         @default(now())
  updatedAt             DateTime         @updatedAt
  index                 Int              @unique
  name                  String
  transaction           AppTransaction[]
  users                 AppUser[]
  webhookAcceptIncoming Boolean          @default(false)
  webhookEventEnabled   Boolean          @default(false)
  webhookEventUrl       String?
  webhookSecret         String?
  webhookVerifyEnabled  Boolean          @default(false)
  webhookVerifyUrl      String?
  webhooks              AppWebhook[]
  wallet                Wallet?          @relation(fields: [walletId], references: [id])
  walletId              String?
}

model AppTransaction {
  id                 String                    @id @default(cuid())
  createdAt          DateTime                  @default(now())
  updatedAt          DateTime                  @updatedAt
  amount             Int?
  commitment         AppTransactionCommitment?
  destination        String?
  errors             AppTransactionError[]
  feePayer           String?
  mint               String?
  source             String?
  signature          String?
  solanaCommitted    DateTime?
  solanaConfirmed    DateTime?
  solanaFinalized    DateTime?
  solanaStart        DateTime?
  solanaTransaction  Json?
  status             AppTransactionStatus      @default(Processing)
  webhookEventStart  DateTime?
  webhookEventEnd    DateTime?
  webhookVerifyStart DateTime?
  webhookVerifyEnd   DateTime?
  app                App                       @relation(fields: [appId], references: [id])
  appId              String
}

enum AppTransactionCommitment {
  Confirmed
  Finalized
  Processed
}

enum AppTransactionStatus {
  Committed
  Confirmed
  Failed
  Finalized
  Processing
}

enum AppTransactionErrorType {
  BadNonce
  InvalidAccount
  SomeError
  Unknown
  WebhookFailed
}

model AppTransactionError {
  id               String                  @id @default(cuid())
  message          String
  type             AppTransactionErrorType @default(Unknown)
  instruction      Int?
  appTransaction   AppTransaction          @relation(fields: [appTransactionId], references: [id])
  appTransactionId String
}

model AppWebhook {
  id              String              @id @default(cuid())
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  direction       AppWebhookDirection
  headers         Json?
  payload         Json?
  responsePayload Json?
  responseError   String?
  responseStatus  Int?
  type            AppWebhookType
  app             App                 @relation(fields: [appId], references: [id])
  appId           String
}

enum AppWebhookDirection {
  Incoming
  Outgoing
}

enum AppWebhookType {
  Event
  Verify
}

model AppUser {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  role      AppUserRole
  app       App         @relation(fields: [appId], references: [id])
  appId     String
  user      User        @relation(fields: [userId], references: [id])
  userId    String

  @@unique([appId, userId])
}

enum AppUserRole {
  Member
  Owner
}

model Cluster {
  id        String        @id @default(cuid())
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  name      String
  endpoint  String
  status    ClusterStatus @default(Active)
  type      ClusterType
  mints     Mint[]
}

enum ClusterStatus {
  Active
  Inactive
}

enum ClusterType {
  Custom
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

model Mint {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  address     String
  coingeckoId String?
  decimals    Int
  logoUrl     String?
  name        String
  symbol      String
  type        MintType
  cluster     Cluster  @relation(fields: [clusterId], references: [id])
  clusterId   String

  @@unique([address, clusterId])
  @@unique([address, symbol])
}

enum MintType {
  SplToken
}

model NetworkStat {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  numSlots         Int
  numTransactions  Int
  samplePeriodSecs Int
  slot             Int
}

model User {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  avatarUrl String?
  name      String?
  password  String?
  role      UserRole
  username  String      @unique
  apps      AppUser[]   @relation()
  emails    UserEmail[] @relation()
}

model UserEmail {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  email     String   @unique
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
}

enum UserRole {
  Admin
  User
}

model Wallet {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  publicKey String
  secretKey String
  apps      App[]           @relation()
  balances  WalletBalance[]
}

model WalletBalance {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  balance   BigInt
  wallet    Wallet?  @relation(fields: [walletId], references: [id])
  walletId  String?
}
