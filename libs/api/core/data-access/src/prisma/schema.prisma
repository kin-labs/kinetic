generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Airdrop {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  amount           Int
  date             String
  fromOwner        String
  fromPreSol       String
  fromPreToken     String
  fromPostSol      String
  fromPostToken    String
  fromTokenAccount String
  mintId           String
  signature        String
  toOwner          String
  toPreSol         String
  toPreToken       String
  toPostSol        String
  toPostToken      String
  toTokenAccount   String
}

model App {
  id               String               @id @default(cuid())
  createdAt        DateTime             @default(now())
  updatedAt        DateTime             @updatedAt
  index            Int                  @unique
  incomingWebhooks AppWebhookIncoming[]
  name             String
  transaction      AppTransaction[]
  users            AppUser[]
  webhookEventUrl  String?
  webhookSecret    String?
  webhookVerifyUrl String?
  wallet           Wallet?              @relation(fields: [walletId], references: [id])
  walletId         String?
}

model AppTransaction {
  id          String               @id @default(cuid())
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  amount      Int?
  destination String?
  errors      Json?
  feePayer    String?
  mint        String?
  source      String?
  signature   String?
  solanaStart DateTime?
  solanaEnd   DateTime?
  status      AppTransactionStatus @default(Pending)
  app         App                  @relation(fields: [appId], references: [id])
  appId       String
}

enum AppTransactionStatus {
  Failed
  Pending
  Succeed
}

model AppWebhookIncoming {
  id        String         @id @default(cuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  headers   Json?
  payload   Json?
  type      AppWebhookType
  app       App            @relation(fields: [appId], references: [id])
  appId     String
}

enum AppWebhookType {
  Event
  Verify
}

model AppUser {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  role      AppUserRole
  app       App         @relation(fields: [appId], references: [id])
  appId     String
  user      User        @relation(fields: [userId], references: [id])
  userId    String

  @@unique([appId, userId])
}

enum AppUserRole {
  Member
  Owner
}

model NetworkStat {
  id               String   @id @default(cuid())
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  numSlots         Int
  numTransactions  Int
  samplePeriodSecs Int
  slot             Int
}

model User {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  avatarUrl String?
  name      String?
  password  String?
  role      UserRole
  username  String      @unique
  apps      AppUser[]   @relation()
  emails    UserEmail[] @relation()
}

model UserEmail {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  email     String   @unique
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   String
}

enum UserRole {
  Admin
  User
}

model Wallet {
  id        String          @id @default(cuid())
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  publicKey String
  secretKey String
  apps      App[]           @relation()
  balances  WalletBalance[]
}

model WalletBalance {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  balance   BigInt
  wallet    Wallet?  @relation(fields: [walletId], references: [id])
  walletId  String?
}
