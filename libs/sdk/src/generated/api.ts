/* tslint:disable */
/* eslint-disable */
/**
 * Mogami
 * The Mogami API description
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Configuration } from './configuration'
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios'
// Some imports not used depending on template conditions
// @ts-ignore
import {
  DUMMY_BASE_URL,
  assertParamExists,
  setApiKeyToObject,
  setBasicAuthToObject,
  setBearerAuthToObject,
  setOAuthToObject,
  setSearchParams,
  serializeDataIfNeeded,
  toPathString,
  createRequestFunction,
} from './common'
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base'

/**
 *
 * @export
 * @interface AirdropStats
 */
export interface AirdropStats {
  /**
   *
   * @type {AirdropStatsCounts}
   * @memberof AirdropStats
   */
  counts: AirdropStatsCounts
  /**
   *
   * @type {Array<string>}
   * @memberof AirdropStats
   */
  dates: Array<string>
}
/**
 *
 * @export
 * @interface AirdropStatsCounts
 */
export interface AirdropStatsCounts {
  /**
   *
   * @type {number}
   * @memberof AirdropStatsCounts
   */
  averageValue: number
  /**
   *
   * @type {number}
   * @memberof AirdropStatsCounts
   */
  total: number
  /**
   *
   * @type {number}
   * @memberof AirdropStatsCounts
   */
  totalValue: number
}
/**
 *
 * @export
 * @interface ApiConfigSummary
 */
export interface ApiConfigSummary {
  /**
   *
   * @type {number}
   * @memberof ApiConfigSummary
   */
  port: number
  /**
   *
   * @type {string}
   * @memberof ApiConfigSummary
   */
  environment: string
  /**
   *
   * @type {string}
   * @memberof ApiConfigSummary
   */
  solanaRpcEndpoint: string
}
/**
 *
 * @export
 * @interface AppConfig
 */
export interface AppConfig {
  /**
   *
   * @type {string}
   * @memberof AppConfig
   */
  hostname: string
  /**
   *
   * @type {string}
   * @memberof AppConfig
   */
  env: string
  /**
   *
   * @type {AppConfigApp}
   * @memberof AppConfig
   */
  app: AppConfigApp
  /**
   *
   * @type {AppConfigMint}
   * @memberof AppConfig
   */
  mint: AppConfigMint
}
/**
 *
 * @export
 * @interface AppConfigApp
 */
export interface AppConfigApp {
  /**
   *
   * @type {number}
   * @memberof AppConfigApp
   */
  index: number
  /**
   *
   * @type {string}
   * @memberof AppConfigApp
   */
  name: string
}
/**
 *
 * @export
 * @interface AppConfigMint
 */
export interface AppConfigMint {
  /**
   *
   * @type {string}
   * @memberof AppConfigMint
   */
  feePayer: string
  /**
   *
   * @type {string}
   * @memberof AppConfigMint
   */
  programId: string
  /**
   *
   * @type {string}
   * @memberof AppConfigMint
   */
  publicKey: string
}
/**
 *
 * @export
 * @interface BalanceResponse
 */
export interface BalanceResponse {
  /**
   *
   * @type {string}
   * @memberof BalanceResponse
   */
  value: string
}
/**
 *
 * @export
 * @interface CreateAccountRequest
 */
export interface CreateAccountRequest {
  /**
   *
   * @type {string}
   * @memberof CreateAccountRequest
   */
  tx: string
}
/**
 *
 * @export
 * @interface CreateAccountResponse
 */
export interface CreateAccountResponse {
  /**
   *
   * @type {object}
   * @memberof CreateAccountResponse
   */
  account: object
  /**
   *
   * @type {string}
   * @memberof CreateAccountResponse
   */
  signature: string
  /**
   *
   * @type {string}
   * @memberof CreateAccountResponse
   */
  status: string
}
/**
 *
 * @export
 * @interface HealthCheckResponse
 */
export interface HealthCheckResponse {
  /**
   *
   * @type {boolean}
   * @memberof HealthCheckResponse
   */
  isSolanaOk: boolean
  /**
   *
   * @type {boolean}
   * @memberof HealthCheckResponse
   */
  isMogamiOk: boolean
  /**
   *
   * @type {string}
   * @memberof HealthCheckResponse
   */
  time: string
}
/**
 *
 * @export
 * @interface HistoryResponse
 */
export interface HistoryResponse {
  /**
   *
   * @type {object}
   * @memberof HistoryResponse
   */
  account: object
  /**
   *
   * @type {Array<string>}
   * @memberof HistoryResponse
   */
  history: Array<string>
}
/**
 *
 * @export
 * @interface MakeTransferRequest
 */
export interface MakeTransferRequest {
  /**
   *
   * @type {string}
   * @memberof MakeTransferRequest
   */
  tx: string
}
/**
 *
 * @export
 * @interface MakeTransferResponse
 */
export interface MakeTransferResponse {
  /**
   *
   * @type {string}
   * @memberof MakeTransferResponse
   */
  signature: string
}
/**
 *
 * @export
 * @interface MinimumRentExemptionBalanceResponse
 */
export interface MinimumRentExemptionBalanceResponse {
  /**
   *
   * @type {number}
   * @memberof MinimumRentExemptionBalanceResponse
   */
  lamports: number
}
/**
 *
 * @export
 * @interface RecentBlockhashResponse
 */
export interface RecentBlockhashResponse {
  /**
   *
   * @type {string}
   * @memberof RecentBlockhashResponse
   */
  blockhash: string
}
/**
 *
 * @export
 * @interface RequestAirdropRequest
 */
export interface RequestAirdropRequest {
  /**
   *
   * @type {string}
   * @memberof RequestAirdropRequest
   */
  account: string
  /**
   *
   * @type {string}
   * @memberof RequestAirdropRequest
   */
  amount?: string
}
/**
 *
 * @export
 * @interface RequestAirdropResponse
 */
export interface RequestAirdropResponse {
  /**
   *
   * @type {string}
   * @memberof RequestAirdropResponse
   */
  signature: string
}

/**
 * AccountApi - axios parameter creator
 * @export
 */
export const AccountApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAccountFeatureControllerGetAccountInfo: async (
      accountId: string,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'accountId' is not null or undefined
      assertParamExists('apiAccountFeatureControllerGetAccountInfo', 'accountId', accountId)
      const localVarPath = `/api/account/info/{accountId}`.replace(
        `{${'accountId'}}`,
        encodeURIComponent(String(accountId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {CreateAccountRequest} createAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount: async (
      createAccountRequest: CreateAccountRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'createAccountRequest' is not null or undefined
      assertParamExists('createAccount', 'createAccountRequest', createAccountRequest)
      const localVarPath = `/api/account/create`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(createAccountRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBalance: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'accountId' is not null or undefined
      assertParamExists('getBalance', 'accountId', accountId)
      const localVarPath = `/api/account/balance/{accountId}`.replace(
        `{${'accountId'}}`,
        encodeURIComponent(String(accountId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHistory: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'accountId' is not null or undefined
      assertParamExists('getHistory', 'accountId', accountId)
      const localVarPath = `/api/account/history/{accountId}`.replace(
        `{${'accountId'}}`,
        encodeURIComponent(String(accountId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenAccounts: async (accountId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      // verify required parameter 'accountId' is not null or undefined
      assertParamExists('tokenAccounts', 'accountId', accountId)
      const localVarPath = `/api/account/token-accounts/{accountId}`.replace(
        `{${'accountId'}}`,
        encodeURIComponent(String(accountId)),
      )
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AccountApi - functional programming interface
 * @export
 */
export const AccountApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AccountApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiAccountFeatureControllerGetAccountInfo(
      accountId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountFeatureControllerGetAccountInfo(
        accountId,
        options,
      )
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {CreateAccountRequest} createAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async createAccount(
      createAccountRequest: CreateAccountRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CreateAccountResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.createAccount(createAccountRequest, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getBalance(
      accountId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BalanceResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getBalance(accountId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getHistory(
      accountId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<HistoryResponse>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getHistory(accountId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async tokenAccounts(
      accountId: string,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.tokenAccounts(accountId, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * AccountApi - factory interface
 * @export
 */
export const AccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AccountApiFp(configuration)
  return {
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiAccountFeatureControllerGetAccountInfo(accountId: string, options?: any): AxiosPromise<void> {
      return localVarFp
        .apiAccountFeatureControllerGetAccountInfo(accountId, options)
        .then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {CreateAccountRequest} createAccountRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(createAccountRequest: CreateAccountRequest, options?: any): AxiosPromise<CreateAccountResponse> {
      return localVarFp.createAccount(createAccountRequest, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBalance(accountId: string, options?: any): AxiosPromise<BalanceResponse> {
      return localVarFp.getBalance(accountId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getHistory(accountId: string, options?: any): AxiosPromise<Array<HistoryResponse>> {
      return localVarFp.getHistory(accountId, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    tokenAccounts(accountId: string, options?: any): AxiosPromise<Array<string>> {
      return localVarFp.tokenAccounts(accountId, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export class AccountApi extends BaseAPI {
  /**
   *
   * @param {string} accountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public apiAccountFeatureControllerGetAccountInfo(accountId: string, options?: AxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .apiAccountFeatureControllerGetAccountInfo(accountId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {CreateAccountRequest} createAccountRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public createAccount(createAccountRequest: CreateAccountRequest, options?: AxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .createAccount(createAccountRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} accountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public getBalance(accountId: string, options?: AxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .getBalance(accountId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} accountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public getHistory(accountId: string, options?: AxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .getHistory(accountId, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {string} accountId
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AccountApi
   */
  public tokenAccounts(accountId: string, options?: AxiosRequestConfig) {
    return AccountApiFp(this.configuration)
      .tokenAccounts(accountId, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * AirdropApi - axios parameter creator
 * @export
 */
export const AirdropApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    airdropStats: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/airdrop/stats`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {RequestAirdropRequest} requestAirdropRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestAirdrop: async (
      requestAirdropRequest: RequestAirdropRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'requestAirdropRequest' is not null or undefined
      assertParamExists('requestAirdrop', 'requestAirdropRequest', requestAirdropRequest)
      const localVarPath = `/api/airdrop`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(requestAirdropRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AirdropApi - functional programming interface
 * @export
 */
export const AirdropApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AirdropApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async airdropStats(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AirdropStats>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.airdropStats(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {RequestAirdropRequest} requestAirdropRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async requestAirdrop(
      requestAirdropRequest: RequestAirdropRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RequestAirdropResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.requestAirdrop(requestAirdropRequest, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * AirdropApi - factory interface
 * @export
 */
export const AirdropApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AirdropApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    airdropStats(options?: any): AxiosPromise<AirdropStats> {
      return localVarFp.airdropStats(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {RequestAirdropRequest} requestAirdropRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    requestAirdrop(requestAirdropRequest: RequestAirdropRequest, options?: any): AxiosPromise<RequestAirdropResponse> {
      return localVarFp.requestAirdrop(requestAirdropRequest, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * AirdropApi - object-oriented interface
 * @export
 * @class AirdropApi
 * @extends {BaseAPI}
 */
export class AirdropApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AirdropApi
   */
  public airdropStats(options?: AxiosRequestConfig) {
    return AirdropApiFp(this.configuration)
      .airdropStats(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {RequestAirdropRequest} requestAirdropRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AirdropApi
   */
  public requestAirdrop(requestAirdropRequest: RequestAirdropRequest, options?: AxiosRequestConfig) {
    return AirdropApiFp(this.configuration)
      .requestAirdrop(requestAirdropRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * AppApi - axios parameter creator
 * @export
 */
export const AppApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppConfig: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/app/config`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * AppApi - functional programming interface
 * @export
 */
export const AppApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = AppApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getAppConfig(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AppConfig>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getAppConfig(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * AppApi - factory interface
 * @export
 */
export const AppApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = AppApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAppConfig(options?: any): AxiosPromise<AppConfig> {
      return localVarFp.getAppConfig(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * AppApi - object-oriented interface
 * @export
 * @class AppApi
 * @extends {BaseAPI}
 */
export class AppApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof AppApi
   */
  public getAppConfig(options?: AxiosRequestConfig) {
    return AppApiFp(this.configuration)
      .getAppConfig(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * ConfigApi - axios parameter creator
 * @export
 */
export const ConfigApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    config: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/config`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * ConfigApi - functional programming interface
 * @export
 */
export const ConfigApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = ConfigApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async config(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ApiConfigSummary>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.config(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * ConfigApi - factory interface
 * @export
 */
export const ConfigApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = ConfigApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    config(options?: any): AxiosPromise<ApiConfigSummary> {
      return localVarFp.config(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * ConfigApi - object-oriented interface
 * @export
 * @class ConfigApi
 * @extends {BaseAPI}
 */
export class ConfigApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof ConfigApi
   */
  public config(options?: AxiosRequestConfig) {
    return ConfigApiFp(this.configuration)
      .config(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCoreFeatureControllerUptime: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/uptime`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheck: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/health-check`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async apiCoreFeatureControllerUptime(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.apiCoreFeatureControllerUptime(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async healthCheck(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HealthCheckResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.healthCheck(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
  const localVarFp = DefaultApiFp(configuration)
  return {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    apiCoreFeatureControllerUptime(options?: any): AxiosPromise<void> {
      return localVarFp.apiCoreFeatureControllerUptime(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    healthCheck(options?: any): AxiosPromise<HealthCheckResponse> {
      return localVarFp.healthCheck(options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public apiCoreFeatureControllerUptime(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .apiCoreFeatureControllerUptime(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof DefaultApi
   */
  public healthCheck(options?: AxiosRequestConfig) {
    return DefaultApiFp(this.configuration)
      .healthCheck(options)
      .then((request) => request(this.axios, this.basePath))
  }
}

/**
 * TransactionApi - axios parameter creator
 * @export
 */
export const TransactionApiAxiosParamCreator = function (configuration?: Configuration) {
  return {
    /**
     *
     * @param {number} dataLength
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinimumRentExemptionBalance: async (
      dataLength: number,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'dataLength' is not null or undefined
      assertParamExists('getMinimumRentExemptionBalance', 'dataLength', dataLength)
      const localVarPath = `/api/transaction/minimum-rent-exemption-balance`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      if (dataLength !== undefined) {
        localVarQueryParameter['dataLength'] = dataLength
      }

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentBlockhash: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
      const localVarPath = `/api/transaction/recent-blockhash`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
    /**
     *
     * @param {MakeTransferRequest} makeTransferRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    makeTransfer: async (
      makeTransferRequest: MakeTransferRequest,
      options: AxiosRequestConfig = {},
    ): Promise<RequestArgs> => {
      // verify required parameter 'makeTransferRequest' is not null or undefined
      assertParamExists('makeTransfer', 'makeTransferRequest', makeTransferRequest)
      const localVarPath = `/api/transaction/make-transfer`
      // use dummy base URL string because the URL constructor only accepts absolute URLs.
      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL)
      let baseOptions
      if (configuration) {
        baseOptions = configuration.baseOptions
      }

      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options }
      const localVarHeaderParameter = {} as any
      const localVarQueryParameter = {} as any

      localVarHeaderParameter['Content-Type'] = 'application/json'

      setSearchParams(localVarUrlObj, localVarQueryParameter)
      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {}
      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers }
      localVarRequestOptions.data = serializeDataIfNeeded(makeTransferRequest, localVarRequestOptions, configuration)

      return {
        url: toPathString(localVarUrlObj),
        options: localVarRequestOptions,
      }
    },
  }
}

/**
 * TransactionApi - functional programming interface
 * @export
 */
export const TransactionApiFp = function (configuration?: Configuration) {
  const localVarAxiosParamCreator = TransactionApiAxiosParamCreator(configuration)
  return {
    /**
     *
     * @param {number} dataLength
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getMinimumRentExemptionBalance(
      dataLength: number,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MinimumRentExemptionBalanceResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getMinimumRentExemptionBalance(dataLength, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async getRecentBlockhash(
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RecentBlockhashResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.getRecentBlockhash(options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
    /**
     *
     * @param {MakeTransferRequest} makeTransferRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    async makeTransfer(
      makeTransferRequest: MakeTransferRequest,
      options?: AxiosRequestConfig,
    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MakeTransferResponse>> {
      const localVarAxiosArgs = await localVarAxiosParamCreator.makeTransfer(makeTransferRequest, options)
      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)
    },
  }
}

/**
 * TransactionApi - factory interface
 * @export
 */
export const TransactionApiFactory = function (
  configuration?: Configuration,
  basePath?: string,
  axios?: AxiosInstance,
) {
  const localVarFp = TransactionApiFp(configuration)
  return {
    /**
     *
     * @param {number} dataLength
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getMinimumRentExemptionBalance(
      dataLength: number,
      options?: any,
    ): AxiosPromise<MinimumRentExemptionBalanceResponse> {
      return localVarFp.getMinimumRentExemptionBalance(dataLength, options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRecentBlockhash(options?: any): AxiosPromise<RecentBlockhashResponse> {
      return localVarFp.getRecentBlockhash(options).then((request) => request(axios, basePath))
    },
    /**
     *
     * @param {MakeTransferRequest} makeTransferRequest
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    makeTransfer(makeTransferRequest: MakeTransferRequest, options?: any): AxiosPromise<MakeTransferResponse> {
      return localVarFp.makeTransfer(makeTransferRequest, options).then((request) => request(axios, basePath))
    },
  }
}

/**
 * TransactionApi - object-oriented interface
 * @export
 * @class TransactionApi
 * @extends {BaseAPI}
 */
export class TransactionApi extends BaseAPI {
  /**
   *
   * @param {number} dataLength
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionApi
   */
  public getMinimumRentExemptionBalance(dataLength: number, options?: AxiosRequestConfig) {
    return TransactionApiFp(this.configuration)
      .getMinimumRentExemptionBalance(dataLength, options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionApi
   */
  public getRecentBlockhash(options?: AxiosRequestConfig) {
    return TransactionApiFp(this.configuration)
      .getRecentBlockhash(options)
      .then((request) => request(this.axios, this.basePath))
  }

  /**
   *
   * @param {MakeTransferRequest} makeTransferRequest
   * @param {*} [options] Override http request option.
   * @throws {RequiredError}
   * @memberof TransactionApi
   */
  public makeTransfer(makeTransferRequest: MakeTransferRequest, options?: AxiosRequestConfig) {
    return TransactionApiFp(this.configuration)
      .makeTransfer(makeTransferRequest, options)
      .then((request) => request(this.axios, this.basePath))
  }
}
