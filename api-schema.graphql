# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type App {
  createdAt: DateTime!
  id: String!
  index: Int!
  name: String
  updatedAt: DateTime!
  users: [AppUser!]
  wallet: Wallet
  webhookEventUrl: String
  webhookSecret: String
  webhookVerifyUrl: String
}

input AppCreateInput {
  index: Int!
  name: String!
  skipWalletCreation: Boolean
}

type AppCreation {
  createdAt: DateTime!
  errors: JSON!
  feePayer: String!
  id: String!
  mint: String!
  processingDuration: Int
  signature: String!
  solanaDuration: Int
  solanaEnd: DateTime!
  solanaStart: DateTime!
  source: String!
  status: AppCreationStatus!
  totalDuration: Int
  updatedAt: DateTime!
}

enum AppCreationStatus {
  Failed
  Pending
  Succeed
}

type AppPayment {
  amount: Int!
  createdAt: DateTime!
  destination: String!
  errors: JSON!
  feePayer: String!
  id: String!
  mint: String!
  processingDuration: Int
  signature: String!
  solanaDuration: Int
  solanaEnd: DateTime!
  solanaStart: DateTime!
  source: String!
  status: AppPaymentStatus!
  totalDuration: Int
  updatedAt: DateTime!
}

enum AppPaymentStatus {
  Failed
  Pending
  Succeed
}

input AppUpdateInput {
  name: String
  webhookEventUrl: String
  webhookSecret: String
  webhookVerifyUrl: String
}

type AppUser {
  app: App
  createdAt: DateTime!
  id: String!
  role: AppUserRole!
  updatedAt: DateTime!
  user: User
}

input AppUserAddInput {
  role: AppUserRole!
  userId: String!
}

input AppUserRemoveInput {
  userId: String!
}

enum AppUserRole {
  Member
  Owner
}

input AppUserUpdateRoleInput {
  role: AppUserRole!
  userId: String!
}

type AppWebhookIncoming {
  createdAt: DateTime!
  headers: JSON!
  id: String!
  payload: JSON!
  type: AppWebhookType!
  updatedAt: DateTime!
}

enum AppWebhookType {
  Event
  Verify
}

type AuthToken {
  token: String!
  user: User!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  appUserAdd(appId: String!, input: AppUserAddInput!): App
  appUserRemove(appId: String!, input: AppUserRemoveInput!): App
  appUserUpdateRole(appId: String!, input: AppUserUpdateRoleInput!): App
  appWalletAdd(appId: String!, walletId: String!): App
  appWalletRemove(appId: String!, walletId: String!): App
  createApp(input: AppCreateInput!): App
  createUser(input: UserCreateInput!): User
  deleteApp(appId: String!): App
  deleteUser(userId: String!): User
  deleteWallet(walletId: String!): Wallet
  generateWallet(index: Int!): Wallet
  login(input: LoginInput!): AuthToken
  logout: Boolean
  updateApp(appId: String!, input: AppUpdateInput!): App
  updateUser(input: UserUpdateInput!, userId: String!): User
}

type NetworkStat {
  createdAt: DateTime!
  id: String!
  numSlots: Float
  numTransactions: Float!
  samplePeriodSecs: Float!
  slot: Float!
  updatedAt: DateTime!
}

type Query {
  app(appId: String!): App
  appCreation(appCreationId: String!, appId: String!): AppCreation
  appCreations(appId: String!): [AppCreation!]
  appPayment(appId: String!, appPaymentId: String!): AppPayment
  appPayments(appId: String!): [AppPayment!]
  appWebhookIncoming(appId: String!, appWebhookIncomingId: String!): AppWebhookIncoming
  appWebhooksIncoming(appId: String!): [AppWebhookIncoming!]
  apps: [App!]
  me: User
  networkStat(networkStatId: String!): NetworkStat
  networkStats: [NetworkStat!]
  uptime: Float!
  user(userId: String!): User
  users: [User!]
  wallet(walletId: String!): Wallet
  walletAirdrop(amount: Float!, walletId: String!): WalletAirdropResponse
  walletBalance(walletId: String!): WalletBalance
  walletBalances(walletId: String!): [WalletBalance!]
  wallets: [Wallet!]
}

type User {
  apps: [AppUser!]
  avatarUrl: String
  createdAt: DateTime!
  email: String
  emails: [UserEmail!]
  id: String!
  name: String
  role: UserRole
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  avatarUrl: String
  email: String!
  name: String
  password: String!
  role: UserRole
  username: String
}

type UserEmail {
  createdAt: DateTime!
  email: String!
  id: String!
  updatedAt: DateTime!
}

enum UserRole {
  Admin
  User
}

input UserUpdateInput {
  avatarUrl: String
  name: String
  role: UserRole
}

type Wallet {
  balances: [WalletBalance!]
  createdAt: DateTime
  id: String
  publicKey: String
  updatedAt: DateTime
}

type WalletAirdropResponse {
  signature: String
}

type WalletBalance {
  balance: BigInt
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}
