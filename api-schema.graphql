# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type App {
  createdAt: DateTime!
  envs: [AppEnv!]
  id: String!
  index: Int!
  name: String
  updatedAt: DateTime!
  users: [AppUser!]
  wallets: [Wallet!]
}

input AppCreateInput {
  index: Int!
  name: String!
  skipWalletCreation: Boolean
}

type AppEnv {
  app: App
  cluster: Cluster
  createdAt: DateTime!
  id: String!
  mints: [AppMint!]
  name: String
  updatedAt: DateTime!
  wallets: [Wallet!]
  webhookAcceptIncoming: Boolean
  webhookEventEnabled: Boolean
  webhookEventUrl: String
  webhookSecret: String
  webhookVerifyEnabled: Boolean
  webhookVerifyUrl: String
}

input AppEnvUpdateInput {
  webhookAcceptIncoming: Boolean
  webhookEventEnabled: Boolean
  webhookEventUrl: String
  webhookSecret: String
  webhookVerifyEnabled: Boolean
  webhookVerifyUrl: String
}

type AppMint {
  createdAt: DateTime!
  id: String!
  mint: Mint
  updatedAt: DateTime!
  wallet: Wallet
}

type AppTransaction {
  amount: Int
  createdAt: DateTime
  destination: String
  errors: [AppTransactionError!]
  feePayer: String
  id: String
  mint: String
  processingDuration: Int
  signature: String
  solanaCommitted: DateTime
  solanaCommittedDuration: Int
  solanaFinalized: DateTime
  solanaFinalizedDuration: Int
  solanaStart: DateTime
  solanaTransaction: JSON
  source: String
  status: AppTransactionStatus!
  totalDuration: Int
  updatedAt: DateTime
  webhookEventDuration: Int
  webhookEventEnd: DateTime
  webhookEventStart: DateTime
  webhookVerifyDuration: Int
  webhookVerifyEnd: DateTime
  webhookVerifyStart: DateTime
}

type AppTransactionError {
  id: String
  instruction: Int
  message: String
  type: AppTransactionErrorType!
}

enum AppTransactionErrorType {
  BadNonce
  InvalidAccount
  SomeError
  Unknown
  WebhookFailed
}

enum AppTransactionStatus {
  Committed
  Confirmed
  Failed
  Finalized
  Processing
}

input AppUpdateInput {
  name: String
}

type AppUser {
  app: App
  createdAt: DateTime!
  id: String!
  role: AppUserRole!
  updatedAt: DateTime!
  user: User
}

input AppUserAddInput {
  role: AppUserRole!
  userId: String!
}

input AppUserRemoveInput {
  userId: String!
}

enum AppUserRole {
  Member
  Owner
}

input AppUserUpdateRoleInput {
  role: AppUserRole!
  userId: String!
}

type AppWebhook {
  createdAt: DateTime!
  direction: AppWebhookDirection!
  headers: JSON
  id: String!
  payload: JSON
  responseError: String
  responsePayload: JSON
  responseStatus: Int
  type: AppWebhookType!
  updatedAt: DateTime!
}

enum AppWebhookDirection {
  Incoming
  Outgoing
}

enum AppWebhookType {
  Event
  Verify
}

type AuthToken {
  token: String!
  user: User!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar BigInt

type Cluster {
  createdAt: DateTime
  endpoint: String
  id: String
  mints: [Mint!]
  name: String
  status: ClusterStatus
  type: ClusterType
  updatedAt: DateTime
}

input ClusterCreateInput {
  endpoint: String!
  name: String!
  type: ClusterType!
}

enum ClusterStatus {
  Active
  Inactive
}

type ClusterToken {
  address: String
  decimals: Int
  extensions: ClusterTokenExtensions
  logoURI: String
  name: String
  symbol: String
  tags: [String!]
}

type ClusterTokenExtensions {
  address: String
  assetContract: String
  bridgeContract: String
  coingeckoId: String
  description: String
  discord: String
  explorer: String
  github: String
  imageUrl: String
  medium: String
  serumV3Usdc: String
  serumV3Usdt: String
  tgann: String
  tggroup: String
  twitter: String
  website: String
}

input ClusterTokenInput {
  address: String
  name: String
  symbol: String
  type: ClusterType!
}

enum ClusterType {
  Custom
  SolanaDevnet
  SolanaMainnet
  SolanaTestnet
}

input ClusterUpdateInput {
  endpoint: String
  name: String
  status: ClusterStatus
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

input LoginInput {
  email: String!
  password: String!
}

type Mint {
  address: String
  coingeckoId: String
  createdAt: DateTime
  decimals: Int
  id: String
  logoUrl: String
  name: String
  symbol: String
  type: MintType
  updatedAt: DateTime
}

input MintAddInput {
  address: String!
  clusterId: String!
  name: String!
  symbol: String!
}

enum MintType {
  SplToken
}

type Mutation {
  addClusterMint(input: MintAddInput!): Cluster
  appUserAdd(appId: String!, input: AppUserAddInput!): App
  appUserRemove(appId: String!, input: AppUserRemoveInput!): App
  appUserUpdateRole(appId: String!, input: AppUserUpdateRoleInput!): App
  appWalletAdd(appId: String!, walletId: String!): App
  appWalletRemove(appId: String!, walletId: String!): App
  createApp(input: AppCreateInput!): App
  createCluster(input: ClusterCreateInput!): Cluster
  createUser(input: UserCreateInput!): User
  deleteApp(appId: String!): App
  deleteCluster(clusterId: String!): Cluster
  deleteUser(userId: String!): User
  deleteWallet(walletId: String!): Wallet
  generateWallet(index: Int!): Wallet
  login(input: LoginInput!): AuthToken
  logout: Boolean
  updateApp(appId: String!, input: AppUpdateInput!): App
  updateAppEnv(appEnvId: String!, appId: String!, input: AppEnvUpdateInput!): AppEnv
  updateCluster(clusterId: String!, input: ClusterUpdateInput!): Cluster
  updateUser(input: UserUpdateInput!, userId: String!): User
}

type NetworkStat {
  createdAt: DateTime!
  id: String!
  numSlots: Float
  numTransactions: Float!
  samplePeriodSecs: Float!
  slot: Float!
  updatedAt: DateTime!
}

type Query {
  app(appId: String!): App
  appEnv(appEnvId: String!, appId: String!): AppEnv
  appTransaction(appId: String!, appTransactionId: String!): AppTransaction
  appTransactions(appId: String!): [AppTransaction!]
  appWebhook(appId: String!, appWebhookId: String!): AppWebhook
  appWebhooks(appEnvId: String!, appId: String!): [AppWebhook!]
  apps: [App!]
  cluster(clusterId: String!): Cluster
  clusterTokens(input: ClusterTokenInput!): [ClusterToken!]
  clusters: [Cluster!]
  me: User
  networkStat(networkStatId: String!): NetworkStat
  networkStats: [NetworkStat!]
  uptime: Float!
  user(userId: String!): User
  users: [User!]
  wallet(walletId: String!): Wallet
  walletAirdrop(amount: Float!, walletId: String!): WalletAirdropResponse
  walletBalance(walletId: String!): WalletBalance
  walletBalances(walletId: String!): [WalletBalance!]
  wallets: [Wallet!]
}

type User {
  apps: [AppUser!]
  avatarUrl: String
  createdAt: DateTime!
  email: String
  emails: [UserEmail!]
  id: String!
  name: String
  role: UserRole
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  avatarUrl: String
  email: String!
  name: String
  password: String!
  role: UserRole
  username: String
}

type UserEmail {
  createdAt: DateTime!
  email: String!
  id: String!
  updatedAt: DateTime!
}

enum UserRole {
  Admin
  User
}

input UserUpdateInput {
  avatarUrl: String
  name: String
  role: UserRole
}

type Wallet {
  balances: [WalletBalance!]
  createdAt: DateTime
  id: String
  publicKey: String
  updatedAt: DateTime
}

type WalletAirdropResponse {
  signature: String
}

type WalletBalance {
  balance: BigInt
  createdAt: DateTime
  id: String
  updatedAt: DateTime
}
